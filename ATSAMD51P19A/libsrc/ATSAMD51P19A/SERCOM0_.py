import uctypes as ct

SERCOM_I2CM = {
  'CTRLA'	: ( 0x00, {
    'reg'	:   0x00 | ct.UINT32,
    'SWRST'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENABLE'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'MODE'	:   0x00 | ct.BFUINT32 |  2 << ct.BF_POS |  3 << ct.BF_LEN,
    'RUNSTDBY'	:   0x00 | ct.BFUINT32 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
    'PINOUT'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  1 << ct.BF_LEN,
    'SDAHOLD'	:   0x00 | ct.BFUINT32 | 20 << ct.BF_POS |  2 << ct.BF_LEN,
    'MEXTTOEN'	:   0x00 | ct.BFUINT32 | 22 << ct.BF_POS |  1 << ct.BF_LEN,
    'SEXTTOEN'	:   0x00 | ct.BFUINT32 | 23 << ct.BF_POS |  1 << ct.BF_LEN,
    'SPEED'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  2 << ct.BF_LEN,
    'SCLSM'	:   0x00 | ct.BFUINT32 | 27 << ct.BF_POS |  1 << ct.BF_LEN,
    'INACTOUT'	:   0x00 | ct.BFUINT32 | 28 << ct.BF_POS |  2 << ct.BF_LEN,
    'LOWTOUTEN'	:   0x00 | ct.BFUINT32 | 30 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'CTRLB'	: ( 0x04, {
    'reg'	:   0x00 | ct.UINT32,
    'SMEN'	:   0x00 | ct.BFUINT32 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
    'QCEN'	:   0x00 | ct.BFUINT32 |  9 << ct.BF_POS |  1 << ct.BF_LEN,
    'CMD'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  2 << ct.BF_LEN,
    'ACKACT'	:   0x00 | ct.BFUINT32 | 18 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'CTRLC'	: ( 0x08, {
    'reg'	:   0x00 | ct.UINT32,
    'DATA32B'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'BAUD'	: ( 0x0C, {
    'reg'	:   0x00 | ct.UINT32,
    'BAUD'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  8 << ct.BF_LEN,
    'BAUDLOW'	:   0x00 | ct.BFUINT32 |  8 << ct.BF_POS |  8 << ct.BF_LEN,
    'HSBAUD'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  8 << ct.BF_LEN,
    'HSBAUDLOW'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  8 << ct.BF_LEN,
  }),
  'INTENCLR'	: ( 0x14, {
    'reg'	:   0x00 | ct.UINT8,
    'MB'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'SB'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTENSET'	: ( 0x16, {
    'reg'	:   0x00 | ct.UINT8,
    'MB'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'SB'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTFLAG'	: ( 0x18, {
    'reg'	:   0x00 | ct.UINT8,
    'MB'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'SB'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'STATUS'	: ( 0x1A, {
    'reg'	:   0x00 | ct.UINT16,
    'BUSERR'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ARBLOST'	:   0x00 | ct.BFUINT16 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXNACK'	:   0x00 | ct.BFUINT16 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'BUSSTATE'	:   0x00 | ct.BFUINT16 |  4 << ct.BF_POS |  2 << ct.BF_LEN,
    'LOWTOUT'	:   0x00 | ct.BFUINT16 |  6 << ct.BF_POS |  1 << ct.BF_LEN,
    'CLKHOLD'	:   0x00 | ct.BFUINT16 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
    'MEXTTOUT'	:   0x00 | ct.BFUINT16 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
    'SEXTTOUT'	:   0x00 | ct.BFUINT16 |  9 << ct.BF_POS |  1 << ct.BF_LEN,
    'LENERR'	:   0x00 | ct.BFUINT16 | 10 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'SYNCBUSY'	: ( 0x1C, {
    'reg'	:   0x00 | ct.UINT32,
    'SWRST'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENABLE'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'SYSOP'	:   0x00 | ct.BFUINT32 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'LENGTH'	:   0x00 | ct.BFUINT32 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'ADDR'	: ( 0x24, {
    'reg'	:   0x00 | ct.UINT32,
    'ADDR'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS | 11 << ct.BF_LEN,
    'LENEN'	:   0x00 | ct.BFUINT32 | 13 << ct.BF_POS |  1 << ct.BF_LEN,
    'HS'	:   0x00 | ct.BFUINT32 | 14 << ct.BF_POS |  1 << ct.BF_LEN,
    'TENBITEN'	:   0x00 | ct.BFUINT32 | 15 << ct.BF_POS |  1 << ct.BF_LEN,
    'LEN'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  8 << ct.BF_LEN,
  }),
  'DATA'	: 0x28 | ct.UINT8,
  'DBGCTRL'	: ( 0x30, {
    'reg'	:   0x00 | ct.UINT8,
    'DBGSTOP'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
}

SERCOM_I2CS = {
  'CTRLA'	: ( 0x00, {
    'reg'	:   0x00 | ct.UINT32,
    'SWRST'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENABLE'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'MODE'	:   0x00 | ct.BFUINT32 |  2 << ct.BF_POS |  3 << ct.BF_LEN,
    'RUNSTDBY'	:   0x00 | ct.BFUINT32 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
    'PINOUT'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  1 << ct.BF_LEN,
    'SDAHOLD'	:   0x00 | ct.BFUINT32 | 20 << ct.BF_POS |  2 << ct.BF_LEN,
    'SEXTTOEN'	:   0x00 | ct.BFUINT32 | 23 << ct.BF_POS |  1 << ct.BF_LEN,
    'SPEED'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  2 << ct.BF_LEN,
    'SCLSM'	:   0x00 | ct.BFUINT32 | 27 << ct.BF_POS |  1 << ct.BF_LEN,
    'LOWTOUTEN'	:   0x00 | ct.BFUINT32 | 30 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'CTRLB'	: ( 0x04, {
    'reg'	:   0x00 | ct.UINT32,
    'SMEN'	:   0x00 | ct.BFUINT32 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
    'GCMD'	:   0x00 | ct.BFUINT32 |  9 << ct.BF_POS |  1 << ct.BF_LEN,
    'AACKEN'	:   0x00 | ct.BFUINT32 | 10 << ct.BF_POS |  1 << ct.BF_LEN,
    'AMODE'	:   0x00 | ct.BFUINT32 | 14 << ct.BF_POS |  2 << ct.BF_LEN,
    'CMD'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  2 << ct.BF_LEN,
    'ACKACT'	:   0x00 | ct.BFUINT32 | 18 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'CTRLC'	: ( 0x08, {
    'reg'	:   0x00 | ct.UINT32,
    'SDASETUP'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  4 << ct.BF_LEN,
    'DATA32B'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTENCLR'	: ( 0x14, {
    'reg'	:   0x00 | ct.UINT8,
    'PREC'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'AMATCH'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'DRDY'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTENSET'	: ( 0x16, {
    'reg'	:   0x00 | ct.UINT8,
    'PREC'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'AMATCH'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'DRDY'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTFLAG'	: ( 0x18, {
    'reg'	:   0x00 | ct.UINT8,
    'PREC'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'AMATCH'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'DRDY'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'STATUS'	: ( 0x1A, {
    'reg'	:   0x00 | ct.UINT16,
    'BUSERR'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'COLL'	:   0x00 | ct.BFUINT16 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXNACK'	:   0x00 | ct.BFUINT16 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'DIR'	:   0x00 | ct.BFUINT16 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'SR'	:   0x00 | ct.BFUINT16 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
    'LOWTOUT'	:   0x00 | ct.BFUINT16 |  6 << ct.BF_POS |  1 << ct.BF_LEN,
    'CLKHOLD'	:   0x00 | ct.BFUINT16 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
    'SEXTTOUT'	:   0x00 | ct.BFUINT16 |  9 << ct.BF_POS |  1 << ct.BF_LEN,
    'HS'	:   0x00 | ct.BFUINT16 | 10 << ct.BF_POS |  1 << ct.BF_LEN,
    'LENERR'	:   0x00 | ct.BFUINT16 | 11 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'SYNCBUSY'	: ( 0x1C, {
    'reg'	:   0x00 | ct.UINT32,
    'SWRST'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENABLE'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'LENGTH'	:   0x00 | ct.BFUINT32 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'LENGTH'	: ( 0x22, {
    'reg'	:   0x00 | ct.UINT16,
    'LEN'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS |  8 << ct.BF_LEN,
    'LENEN'	:   0x00 | ct.BFUINT16 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'ADDR'	: ( 0x24, {
    'reg'	:   0x00 | ct.UINT32,
    'GENCEN'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ADDR'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS | 10 << ct.BF_LEN,
    'TENBITEN'	:   0x00 | ct.BFUINT32 | 15 << ct.BF_POS |  1 << ct.BF_LEN,
    'ADDRMASK'	:   0x00 | ct.BFUINT32 | 17 << ct.BF_POS | 10 << ct.BF_LEN,
  }),
  'DATA'	: 0x28 | ct.UINT32,
}

SERCOM_SPIS = {
  'CTRLA'	: ( 0x00, {
    'reg'	:   0x00 | ct.UINT32,
    'SWRST'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENABLE'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'MODE'	:   0x00 | ct.BFUINT32 |  2 << ct.BF_POS |  3 << ct.BF_LEN,
    'RUNSTDBY'	:   0x00 | ct.BFUINT32 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
    'IBON'	:   0x00 | ct.BFUINT32 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
    'DOPO'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  2 << ct.BF_LEN,
    'DIPO'	:   0x00 | ct.BFUINT32 | 20 << ct.BF_POS |  2 << ct.BF_LEN,
    'FORM'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  4 << ct.BF_LEN,
    'CPHA'	:   0x00 | ct.BFUINT32 | 28 << ct.BF_POS |  1 << ct.BF_LEN,
    'CPOL'	:   0x00 | ct.BFUINT32 | 29 << ct.BF_POS |  1 << ct.BF_LEN,
    'DORD'	:   0x00 | ct.BFUINT32 | 30 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'CTRLB'	: ( 0x04, {
    'reg'	:   0x00 | ct.UINT32,
    'CHSIZE'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  3 << ct.BF_LEN,
    'PLOADEN'	:   0x00 | ct.BFUINT32 |  6 << ct.BF_POS |  1 << ct.BF_LEN,
    'SSDE'	:   0x00 | ct.BFUINT32 |  9 << ct.BF_POS |  1 << ct.BF_LEN,
    'MSSEN'	:   0x00 | ct.BFUINT32 | 13 << ct.BF_POS |  1 << ct.BF_LEN,
    'AMODE'	:   0x00 | ct.BFUINT32 | 14 << ct.BF_POS |  2 << ct.BF_LEN,
    'RXEN'	:   0x00 | ct.BFUINT32 | 17 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'CTRLC'	: ( 0x08, {
    'reg'	:   0x00 | ct.UINT32,
    'ICSPACE'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  6 << ct.BF_LEN,
    'DATA32B'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'BAUD'	: 0x0C | ct.UINT8,
  'INTENCLR'	: ( 0x14, {
    'reg'	:   0x00 | ct.UINT8,
    'DRE'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXC'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXC'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'SSL'	:   0x00 | ct.BFUINT8 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTENSET'	: ( 0x16, {
    'reg'	:   0x00 | ct.UINT8,
    'DRE'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXC'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXC'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'SSL'	:   0x00 | ct.BFUINT8 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTFLAG'	: ( 0x18, {
    'reg'	:   0x00 | ct.UINT8,
    'DRE'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXC'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXC'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'SSL'	:   0x00 | ct.BFUINT8 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'STATUS'	: ( 0x1A, {
    'reg'	:   0x00 | ct.UINT16,
    'BUFOVF'	:   0x00 | ct.BFUINT16 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'LENERR'	:   0x00 | ct.BFUINT16 | 11 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'SYNCBUSY'	: ( 0x1C, {
    'reg'	:   0x00 | ct.UINT32,
    'SWRST'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENABLE'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTRLB'	:   0x00 | ct.BFUINT32 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'LENGTH'	:   0x00 | ct.BFUINT32 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'LENGTH'	: ( 0x22, {
    'reg'	:   0x00 | ct.UINT16,
    'LEN'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS |  8 << ct.BF_LEN,
    'LENEN'	:   0x00 | ct.BFUINT16 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'ADDR'	: ( 0x24, {
    'reg'	:   0x00 | ct.UINT32,
    'ADDR'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  8 << ct.BF_LEN,
    'ADDRMASK'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  8 << ct.BF_LEN,
  }),
  'DATA'	: 0x28 | ct.UINT32,
  'DBGCTRL'	: ( 0x30, {
    'reg'	:   0x00 | ct.UINT8,
    'DBGSTOP'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
}

SERCOM_SPIM = {
  'CTRLA'	: ( 0x00, {
    'reg'	:   0x00 | ct.UINT32,
    'SWRST'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENABLE'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'MODE'	:   0x00 | ct.BFUINT32 |  2 << ct.BF_POS |  3 << ct.BF_LEN,
    'RUNSTDBY'	:   0x00 | ct.BFUINT32 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
    'IBON'	:   0x00 | ct.BFUINT32 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
    'DOPO'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  2 << ct.BF_LEN,
    'DIPO'	:   0x00 | ct.BFUINT32 | 20 << ct.BF_POS |  2 << ct.BF_LEN,
    'FORM'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  4 << ct.BF_LEN,
    'CPHA'	:   0x00 | ct.BFUINT32 | 28 << ct.BF_POS |  1 << ct.BF_LEN,
    'CPOL'	:   0x00 | ct.BFUINT32 | 29 << ct.BF_POS |  1 << ct.BF_LEN,
    'DORD'	:   0x00 | ct.BFUINT32 | 30 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'CTRLB'	: ( 0x04, {
    'reg'	:   0x00 | ct.UINT32,
    'CHSIZE'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  3 << ct.BF_LEN,
    'PLOADEN'	:   0x00 | ct.BFUINT32 |  6 << ct.BF_POS |  1 << ct.BF_LEN,
    'SSDE'	:   0x00 | ct.BFUINT32 |  9 << ct.BF_POS |  1 << ct.BF_LEN,
    'MSSEN'	:   0x00 | ct.BFUINT32 | 13 << ct.BF_POS |  1 << ct.BF_LEN,
    'AMODE'	:   0x00 | ct.BFUINT32 | 14 << ct.BF_POS |  2 << ct.BF_LEN,
    'RXEN'	:   0x00 | ct.BFUINT32 | 17 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'CTRLC'	: ( 0x08, {
    'reg'	:   0x00 | ct.UINT32,
    'ICSPACE'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  6 << ct.BF_LEN,
    'DATA32B'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'BAUD'	: 0x0C | ct.UINT8,
  'INTENCLR'	: ( 0x14, {
    'reg'	:   0x00 | ct.UINT8,
    'DRE'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXC'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXC'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'SSL'	:   0x00 | ct.BFUINT8 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTENSET'	: ( 0x16, {
    'reg'	:   0x00 | ct.UINT8,
    'DRE'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXC'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXC'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'SSL'	:   0x00 | ct.BFUINT8 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTFLAG'	: ( 0x18, {
    'reg'	:   0x00 | ct.UINT8,
    'DRE'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXC'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXC'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'SSL'	:   0x00 | ct.BFUINT8 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'STATUS'	: ( 0x1A, {
    'reg'	:   0x00 | ct.UINT16,
    'BUFOVF'	:   0x00 | ct.BFUINT16 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'LENERR'	:   0x00 | ct.BFUINT16 | 11 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'SYNCBUSY'	: ( 0x1C, {
    'reg'	:   0x00 | ct.UINT32,
    'SWRST'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENABLE'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTRLB'	:   0x00 | ct.BFUINT32 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'LENGTH'	:   0x00 | ct.BFUINT32 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'LENGTH'	: ( 0x22, {
    'reg'	:   0x00 | ct.UINT16,
    'LEN'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS |  8 << ct.BF_LEN,
    'LENEN'	:   0x00 | ct.BFUINT16 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'ADDR'	: ( 0x24, {
    'reg'	:   0x00 | ct.UINT32,
    'ADDR'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  8 << ct.BF_LEN,
    'ADDRMASK'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  8 << ct.BF_LEN,
  }),
  'DATA'	: 0x28 | ct.UINT32,
  'DBGCTRL'	: ( 0x30, {
    'reg'	:   0x00 | ct.UINT8,
    'DBGSTOP'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
}

SERCOM_USART_EXT = {
  'CTRLA'	: ( 0x00, {
    'reg'	:   0x00 | ct.UINT32,
    'SWRST'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENABLE'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'MODE'	:   0x00 | ct.BFUINT32 |  2 << ct.BF_POS |  3 << ct.BF_LEN,
    'RUNSTDBY'	:   0x00 | ct.BFUINT32 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
    'IBON'	:   0x00 | ct.BFUINT32 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXINV'	:   0x00 | ct.BFUINT32 |  9 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXINV'	:   0x00 | ct.BFUINT32 | 10 << ct.BF_POS |  1 << ct.BF_LEN,
    'SAMPR'	:   0x00 | ct.BFUINT32 | 13 << ct.BF_POS |  3 << ct.BF_LEN,
    'TXPO'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  2 << ct.BF_LEN,
    'RXPO'	:   0x00 | ct.BFUINT32 | 20 << ct.BF_POS |  2 << ct.BF_LEN,
    'SAMPA'	:   0x00 | ct.BFUINT32 | 22 << ct.BF_POS |  2 << ct.BF_LEN,
    'FORM'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  4 << ct.BF_LEN,
    'CMODE'	:   0x00 | ct.BFUINT32 | 28 << ct.BF_POS |  1 << ct.BF_LEN,
    'CPOL'	:   0x00 | ct.BFUINT32 | 29 << ct.BF_POS |  1 << ct.BF_LEN,
    'DORD'	:   0x00 | ct.BFUINT32 | 30 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'CTRLB'	: ( 0x04, {
    'reg'	:   0x00 | ct.UINT32,
    'CHSIZE'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  3 << ct.BF_LEN,
    'SBMODE'	:   0x00 | ct.BFUINT32 |  6 << ct.BF_POS |  1 << ct.BF_LEN,
    'COLDEN'	:   0x00 | ct.BFUINT32 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
    'SFDE'	:   0x00 | ct.BFUINT32 |  9 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENC'	:   0x00 | ct.BFUINT32 | 10 << ct.BF_POS |  1 << ct.BF_LEN,
    'PMODE'	:   0x00 | ct.BFUINT32 | 13 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXEN'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXEN'	:   0x00 | ct.BFUINT32 | 17 << ct.BF_POS |  1 << ct.BF_LEN,
    'LINCMD'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  2 << ct.BF_LEN,
  }),
  'CTRLC'	: ( 0x08, {
    'reg'	:   0x00 | ct.UINT32,
    'GTIME'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  3 << ct.BF_LEN,
    'BRKLEN'	:   0x00 | ct.BFUINT32 |  8 << ct.BF_POS |  2 << ct.BF_LEN,
    'HDRDLY'	:   0x00 | ct.BFUINT32 | 10 << ct.BF_POS |  2 << ct.BF_LEN,
    'INACK'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  1 << ct.BF_LEN,
    'DSNACK'	:   0x00 | ct.BFUINT32 | 17 << ct.BF_POS |  1 << ct.BF_LEN,
    'MAXITER'	:   0x00 | ct.BFUINT32 | 20 << ct.BF_POS |  3 << ct.BF_LEN,
    'DATA32B'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  2 << ct.BF_LEN,
  }),
  'BAUD'	: 0x0C | ct.UINT16,
  'BAUD_FRAC_MODE'	: ( 0x0C, {
    'reg'	:   0x00 | ct.UINT16,
    'BAUD'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS | 13 << ct.BF_LEN,
    'FP'	:   0x00 | ct.BFUINT16 | 13 << ct.BF_POS |  3 << ct.BF_LEN,
  }),
  'BAUD_FRACFP_MODE'	: ( 0x0C, {
    'reg'	:   0x00 | ct.UINT16,
    'BAUD'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS | 13 << ct.BF_LEN,
    'FP'	:   0x00 | ct.BFUINT16 | 13 << ct.BF_POS |  3 << ct.BF_LEN,
  }),
  'BAUD_USARTFP_MODE'	: 0x0C | ct.UINT16,
  'RXPL'	: 0x0E | ct.UINT8,
  'INTENCLR'	: ( 0x14, {
    'reg'	:   0x00 | ct.UINT8,
    'DRE'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXC'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXC'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXS'	:   0x00 | ct.BFUINT8 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTSIC'	:   0x00 | ct.BFUINT8 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXBRK'	:   0x00 | ct.BFUINT8 |  5 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTENSET'	: ( 0x16, {
    'reg'	:   0x00 | ct.UINT8,
    'DRE'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXC'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXC'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXS'	:   0x00 | ct.BFUINT8 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTSIC'	:   0x00 | ct.BFUINT8 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXBRK'	:   0x00 | ct.BFUINT8 |  5 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTFLAG'	: ( 0x18, {
    'reg'	:   0x00 | ct.UINT8,
    'DRE'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXC'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXC'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXS'	:   0x00 | ct.BFUINT8 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTSIC'	:   0x00 | ct.BFUINT8 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXBRK'	:   0x00 | ct.BFUINT8 |  5 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'STATUS'	: ( 0x1A, {
    'reg'	:   0x00 | ct.UINT16,
    'PERR'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'FERR'	:   0x00 | ct.BFUINT16 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'BUFOVF'	:   0x00 | ct.BFUINT16 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTS'	:   0x00 | ct.BFUINT16 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'ISF'	:   0x00 | ct.BFUINT16 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
    'COLL'	:   0x00 | ct.BFUINT16 |  5 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXE'	:   0x00 | ct.BFUINT16 |  6 << ct.BF_POS |  1 << ct.BF_LEN,
    'ITER'	:   0x00 | ct.BFUINT16 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'SYNCBUSY'	: ( 0x1C, {
    'reg'	:   0x00 | ct.UINT32,
    'SWRST'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENABLE'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTRLB'	:   0x00 | ct.BFUINT32 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXERRCNT'	:   0x00 | ct.BFUINT32 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'LENGTH'	:   0x00 | ct.BFUINT32 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'RXERRCNT'	: 0x20 | ct.UINT8,
  'LENGTH'	: ( 0x22, {
    'reg'	:   0x00 | ct.UINT16,
    'LEN'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS |  8 << ct.BF_LEN,
    'LENEN'	:   0x00 | ct.BFUINT16 |  8 << ct.BF_POS |  2 << ct.BF_LEN,
  }),
  'DATA'	: 0x28 | ct.UINT32,
  'DBGCTRL'	: ( 0x30, {
    'reg'	:   0x00 | ct.UINT8,
    'DBGSTOP'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
}

SERCOM_USART_INT = {
  'CTRLA'	: ( 0x00, {
    'reg'	:   0x00 | ct.UINT32,
    'SWRST'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENABLE'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'MODE'	:   0x00 | ct.BFUINT32 |  2 << ct.BF_POS |  3 << ct.BF_LEN,
    'RUNSTDBY'	:   0x00 | ct.BFUINT32 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
    'IBON'	:   0x00 | ct.BFUINT32 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXINV'	:   0x00 | ct.BFUINT32 |  9 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXINV'	:   0x00 | ct.BFUINT32 | 10 << ct.BF_POS |  1 << ct.BF_LEN,
    'SAMPR'	:   0x00 | ct.BFUINT32 | 13 << ct.BF_POS |  3 << ct.BF_LEN,
    'TXPO'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  2 << ct.BF_LEN,
    'RXPO'	:   0x00 | ct.BFUINT32 | 20 << ct.BF_POS |  2 << ct.BF_LEN,
    'SAMPA'	:   0x00 | ct.BFUINT32 | 22 << ct.BF_POS |  2 << ct.BF_LEN,
    'FORM'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  4 << ct.BF_LEN,
    'CMODE'	:   0x00 | ct.BFUINT32 | 28 << ct.BF_POS |  1 << ct.BF_LEN,
    'CPOL'	:   0x00 | ct.BFUINT32 | 29 << ct.BF_POS |  1 << ct.BF_LEN,
    'DORD'	:   0x00 | ct.BFUINT32 | 30 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'CTRLB'	: ( 0x04, {
    'reg'	:   0x00 | ct.UINT32,
    'CHSIZE'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  3 << ct.BF_LEN,
    'SBMODE'	:   0x00 | ct.BFUINT32 |  6 << ct.BF_POS |  1 << ct.BF_LEN,
    'COLDEN'	:   0x00 | ct.BFUINT32 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
    'SFDE'	:   0x00 | ct.BFUINT32 |  9 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENC'	:   0x00 | ct.BFUINT32 | 10 << ct.BF_POS |  1 << ct.BF_LEN,
    'PMODE'	:   0x00 | ct.BFUINT32 | 13 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXEN'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXEN'	:   0x00 | ct.BFUINT32 | 17 << ct.BF_POS |  1 << ct.BF_LEN,
    'LINCMD'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  2 << ct.BF_LEN,
  }),
  'CTRLC'	: ( 0x08, {
    'reg'	:   0x00 | ct.UINT32,
    'GTIME'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  3 << ct.BF_LEN,
    'BRKLEN'	:   0x00 | ct.BFUINT32 |  8 << ct.BF_POS |  2 << ct.BF_LEN,
    'HDRDLY'	:   0x00 | ct.BFUINT32 | 10 << ct.BF_POS |  2 << ct.BF_LEN,
    'INACK'	:   0x00 | ct.BFUINT32 | 16 << ct.BF_POS |  1 << ct.BF_LEN,
    'DSNACK'	:   0x00 | ct.BFUINT32 | 17 << ct.BF_POS |  1 << ct.BF_LEN,
    'MAXITER'	:   0x00 | ct.BFUINT32 | 20 << ct.BF_POS |  3 << ct.BF_LEN,
    'DATA32B'	:   0x00 | ct.BFUINT32 | 24 << ct.BF_POS |  2 << ct.BF_LEN,
  }),
  'BAUD'	: 0x0C | ct.UINT16,
  'BAUD_FRAC_MODE'	: ( 0x0C, {
    'reg'	:   0x00 | ct.UINT16,
    'BAUD'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS | 13 << ct.BF_LEN,
    'FP'	:   0x00 | ct.BFUINT16 | 13 << ct.BF_POS |  3 << ct.BF_LEN,
  }),
  'BAUD_FRACFP_MODE'	: ( 0x0C, {
    'reg'	:   0x00 | ct.UINT16,
    'BAUD'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS | 13 << ct.BF_LEN,
    'FP'	:   0x00 | ct.BFUINT16 | 13 << ct.BF_POS |  3 << ct.BF_LEN,
  }),
  'BAUD_USARTFP_MODE'	: 0x0C | ct.UINT16,
  'RXPL'	: 0x0E | ct.UINT8,
  'INTENCLR'	: ( 0x14, {
    'reg'	:   0x00 | ct.UINT8,
    'DRE'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXC'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXC'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXS'	:   0x00 | ct.BFUINT8 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTSIC'	:   0x00 | ct.BFUINT8 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXBRK'	:   0x00 | ct.BFUINT8 |  5 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTENSET'	: ( 0x16, {
    'reg'	:   0x00 | ct.UINT8,
    'DRE'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXC'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXC'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXS'	:   0x00 | ct.BFUINT8 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTSIC'	:   0x00 | ct.BFUINT8 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXBRK'	:   0x00 | ct.BFUINT8 |  5 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTFLAG'	: ( 0x18, {
    'reg'	:   0x00 | ct.UINT8,
    'DRE'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXC'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXC'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXS'	:   0x00 | ct.BFUINT8 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTSIC'	:   0x00 | ct.BFUINT8 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXBRK'	:   0x00 | ct.BFUINT8 |  5 << ct.BF_POS |  1 << ct.BF_LEN,
    'ERROR'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'STATUS'	: ( 0x1A, {
    'reg'	:   0x00 | ct.UINT16,
    'PERR'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'FERR'	:   0x00 | ct.BFUINT16 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'BUFOVF'	:   0x00 | ct.BFUINT16 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTS'	:   0x00 | ct.BFUINT16 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'ISF'	:   0x00 | ct.BFUINT16 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
    'COLL'	:   0x00 | ct.BFUINT16 |  5 << ct.BF_POS |  1 << ct.BF_LEN,
    'TXE'	:   0x00 | ct.BFUINT16 |  6 << ct.BF_POS |  1 << ct.BF_LEN,
    'ITER'	:   0x00 | ct.BFUINT16 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'SYNCBUSY'	: ( 0x1C, {
    'reg'	:   0x00 | ct.UINT32,
    'SWRST'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENABLE'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTRLB'	:   0x00 | ct.BFUINT32 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'RXERRCNT'	:   0x00 | ct.BFUINT32 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'LENGTH'	:   0x00 | ct.BFUINT32 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'RXERRCNT'	: 0x20 | ct.UINT8,
  'LENGTH'	: ( 0x22, {
    'reg'	:   0x00 | ct.UINT16,
    'LEN'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS |  8 << ct.BF_LEN,
    'LENEN'	:   0x00 | ct.BFUINT16 |  8 << ct.BF_POS |  2 << ct.BF_LEN,
  }),
  'DATA'	: 0x28 | ct.UINT32,
  'DBGCTRL'	: ( 0x30, {
    'reg'	:   0x00 | ct.UINT8,
    'DBGSTOP'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
}

SERCOM_ = {
  'I2CM'	: ( 0x00, SERCOM_I2CM ),
  'I2CS'	: ( 0x00, SERCOM_I2CS ),
  'SPIS'	: ( 0x00, SERCOM_SPIS ),
  'SPIM'	: ( 0x00, SERCOM_SPIM ),
  'USART_EXT'	: ( 0x00, SERCOM_USART_EXT ),
  'USART_INT'	: ( 0x00, SERCOM_USART_INT ),
}

SERCOM0 = ct.struct(0x40003000, SERCOM_)
