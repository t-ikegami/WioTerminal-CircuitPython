import uctypes as ct

ADC_ = {
  'CTRLA'	: ( 0x00, {
    'reg'	:   0x00 | ct.UINT16,
    'SWRST'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENABLE'	:   0x00 | ct.BFUINT16 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'DUALSEL'	:   0x00 | ct.BFUINT16 |  3 << ct.BF_POS |  2 << ct.BF_LEN,
    'SLAVEEN'	:   0x00 | ct.BFUINT16 |  5 << ct.BF_POS |  1 << ct.BF_LEN,
    'RUNSTDBY'	:   0x00 | ct.BFUINT16 |  6 << ct.BF_POS |  1 << ct.BF_LEN,
    'ONDEMAND'	:   0x00 | ct.BFUINT16 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
    'PRESCALER'	:   0x00 | ct.BFUINT16 |  8 << ct.BF_POS |  3 << ct.BF_LEN,
    'R2R'	:   0x00 | ct.BFUINT16 | 15 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'EVCTRL'	: ( 0x02, {
    'reg'	:   0x00 | ct.UINT8,
    'FLUSHEI'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'STARTEI'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'FLUSHINV'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'STARTINV'	:   0x00 | ct.BFUINT8 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'RESRDYEO'	:   0x00 | ct.BFUINT8 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
    'WINMONEO'	:   0x00 | ct.BFUINT8 |  5 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'DBGCTRL'	: ( 0x03, {
    'reg'	:   0x00 | ct.UINT8,
    'DBGRUN'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INPUTCTRL'	: ( 0x04, {
    'reg'	:   0x00 | ct.UINT16,
    'MUXPOS'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS |  5 << ct.BF_LEN,
    'DIFFMODE'	:   0x00 | ct.BFUINT16 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
    'MUXNEG'	:   0x00 | ct.BFUINT16 |  8 << ct.BF_POS |  5 << ct.BF_LEN,
    'DSEQSTOP'	:   0x00 | ct.BFUINT16 | 15 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'CTRLB'	: ( 0x06, {
    'reg'	:   0x00 | ct.UINT16,
    'LEFTADJ'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'FREERUN'	:   0x00 | ct.BFUINT16 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'CORREN'	:   0x00 | ct.BFUINT16 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'RESSEL'	:   0x00 | ct.BFUINT16 |  3 << ct.BF_POS |  2 << ct.BF_LEN,
    'WINMODE'	:   0x00 | ct.BFUINT16 |  8 << ct.BF_POS |  3 << ct.BF_LEN,
    'WINSS'	:   0x00 | ct.BFUINT16 | 11 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'REFCTRL'	: ( 0x08, {
    'reg'	:   0x00 | ct.UINT8,
    'REFSEL'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  4 << ct.BF_LEN,
    'REFCOMP'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'AVGCTRL'	: ( 0x0A, {
    'reg'	:   0x00 | ct.UINT8,
    'SAMPLENUM'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  4 << ct.BF_LEN,
    'ADJRES'	:   0x00 | ct.BFUINT8 |  4 << ct.BF_POS |  3 << ct.BF_LEN,
  }),
  'SAMPCTRL'	: ( 0x0B, {
    'reg'	:   0x00 | ct.UINT8,
    'SAMPLEN'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  6 << ct.BF_LEN,
    'OFFCOMP'	:   0x00 | ct.BFUINT8 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'WINLT'	: 0x0C | ct.UINT16,
  'WINUT'	: 0x0E | ct.UINT16,
  'GAINCORR'	: ( 0x10, {
    'reg'	:   0x00 | ct.UINT16,
    'GAINCORR'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS | 12 << ct.BF_LEN,
  }),
  'OFFSETCORR'	: ( 0x12, {
    'reg'	:   0x00 | ct.UINT16,
    'OFFSETCORR'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS | 12 << ct.BF_LEN,
  }),
  'SWTRIG'	: ( 0x14, {
    'reg'	:   0x00 | ct.UINT8,
    'FLUSH'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'START'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTENCLR'	: ( 0x2C, {
    'reg'	:   0x00 | ct.UINT8,
    'RESRDY'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'OVERRUN'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'WINMON'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTENSET'	: ( 0x2D, {
    'reg'	:   0x00 | ct.UINT8,
    'RESRDY'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'OVERRUN'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'WINMON'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'INTFLAG'	: ( 0x2E, {
    'reg'	:   0x00 | ct.UINT8,
    'RESRDY'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'OVERRUN'	:   0x00 | ct.BFUINT8 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'WINMON'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'STATUS'	: ( 0x2F, {
    'reg'	:   0x00 | ct.UINT8,
    'ADCBUSY'	:   0x00 | ct.BFUINT8 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'WCC'	:   0x00 | ct.BFUINT8 |  2 << ct.BF_POS |  6 << ct.BF_LEN,
  }),
  'SYNCBUSY'	: ( 0x30, {
    'reg'	:   0x00 | ct.UINT32,
    'SWRST'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'ENABLE'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'INPUTCTRL'	:   0x00 | ct.BFUINT32 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTRLB'	:   0x00 | ct.BFUINT32 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'REFCTRL'	:   0x00 | ct.BFUINT32 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
    'AVGCTRL'	:   0x00 | ct.BFUINT32 |  5 << ct.BF_POS |  1 << ct.BF_LEN,
    'SAMPCTRL'	:   0x00 | ct.BFUINT32 |  6 << ct.BF_POS |  1 << ct.BF_LEN,
    'WINLT'	:   0x00 | ct.BFUINT32 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
    'WINUT'	:   0x00 | ct.BFUINT32 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
    'GAINCORR'	:   0x00 | ct.BFUINT32 |  9 << ct.BF_POS |  1 << ct.BF_LEN,
    'OFFSETCORR'	:   0x00 | ct.BFUINT32 | 10 << ct.BF_POS |  1 << ct.BF_LEN,
    'SWTRIG'	:   0x00 | ct.BFUINT32 | 11 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'DSEQDATA'	: 0x34 | ct.UINT32,
  'DSEQCTRL'	: ( 0x38, {
    'reg'	:   0x00 | ct.UINT32,
    'INPUTCTRL'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTRLB'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'REFCTRL'	:   0x00 | ct.BFUINT32 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'AVGCTRL'	:   0x00 | ct.BFUINT32 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'SAMPCTRL'	:   0x00 | ct.BFUINT32 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
    'WINLT'	:   0x00 | ct.BFUINT32 |  5 << ct.BF_POS |  1 << ct.BF_LEN,
    'WINUT'	:   0x00 | ct.BFUINT32 |  6 << ct.BF_POS |  1 << ct.BF_LEN,
    'GAINCORR'	:   0x00 | ct.BFUINT32 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
    'OFFSETCORR'	:   0x00 | ct.BFUINT32 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
    'AUTOSTART'	:   0x00 | ct.BFUINT32 | 31 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'DSEQSTAT'	: ( 0x3C, {
    'reg'	:   0x00 | ct.UINT32,
    'INPUTCTRL'	:   0x00 | ct.BFUINT32 |  0 << ct.BF_POS |  1 << ct.BF_LEN,
    'CTRLB'	:   0x00 | ct.BFUINT32 |  1 << ct.BF_POS |  1 << ct.BF_LEN,
    'REFCTRL'	:   0x00 | ct.BFUINT32 |  2 << ct.BF_POS |  1 << ct.BF_LEN,
    'AVGCTRL'	:   0x00 | ct.BFUINT32 |  3 << ct.BF_POS |  1 << ct.BF_LEN,
    'SAMPCTRL'	:   0x00 | ct.BFUINT32 |  4 << ct.BF_POS |  1 << ct.BF_LEN,
    'WINLT'	:   0x00 | ct.BFUINT32 |  5 << ct.BF_POS |  1 << ct.BF_LEN,
    'WINUT'	:   0x00 | ct.BFUINT32 |  6 << ct.BF_POS |  1 << ct.BF_LEN,
    'GAINCORR'	:   0x00 | ct.BFUINT32 |  7 << ct.BF_POS |  1 << ct.BF_LEN,
    'OFFSETCORR'	:   0x00 | ct.BFUINT32 |  8 << ct.BF_POS |  1 << ct.BF_LEN,
    'BUSY'	:   0x00 | ct.BFUINT32 | 31 << ct.BF_POS |  1 << ct.BF_LEN,
  }),
  'RESULT'	: 0x40 | ct.UINT16,
  'RESS'	: 0x44 | ct.UINT16,
  'CALIB'	: ( 0x48, {
    'reg'	:   0x00 | ct.UINT16,
    'BIASCOMP'	:   0x00 | ct.BFUINT16 |  0 << ct.BF_POS |  3 << ct.BF_LEN,
    'BIASR2R'	:   0x00 | ct.BFUINT16 |  4 << ct.BF_POS |  3 << ct.BF_LEN,
    'BIASREFBUF'	:   0x00 | ct.BFUINT16 |  8 << ct.BF_POS |  3 << ct.BF_LEN,
  }),
}

ADC0 = ct.struct(0x43001c00, ADC_, ct.LITTLE_ENDIAN)
